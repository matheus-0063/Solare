// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Solare.Data.Context;

#nullable disable

namespace Solare.Data.Migrations
{
    [DbContext(typeof(SolareDBContext))]
    [Migration("20241126011648_solare_V2")]
    partial class solare_V2
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.7")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Solare.Business.Models.Endereco", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Bairro")
                        .IsRequired()
                        .HasColumnType("varchar(100)");

                    b.Property<string>("Cep")
                        .IsRequired()
                        .HasColumnType("varchar(100)");

                    b.Property<string>("Cidade")
                        .IsRequired()
                        .HasColumnType("varchar(100)");

                    b.Property<string>("Complemento")
                        .IsRequired()
                        .HasColumnType("varchar(100)");

                    b.Property<string>("Estado")
                        .IsRequired()
                        .HasColumnType("varchar(100)");

                    b.Property<Guid?>("FornecedorId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Logradouro")
                        .IsRequired()
                        .HasColumnType("varchar(100)");

                    b.Property<string>("Numero")
                        .IsRequired()
                        .HasColumnType("varchar(100)");

                    b.HasKey("Id");

                    b.HasIndex("FornecedorId")
                        .IsUnique()
                        .HasFilter("[FornecedorId] IS NOT NULL");

                    b.ToTable("Enderecos", (string)null);
                });

            modelBuilder.Entity("Solare.Business.Models.EnderecoSimulacao", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Bairro")
                        .IsRequired()
                        .HasColumnType("varchar(100)");

                    b.Property<string>("Cep")
                        .IsRequired()
                        .HasColumnType("varchar(100)");

                    b.Property<string>("Cidade")
                        .IsRequired()
                        .HasColumnType("varchar(100)");

                    b.Property<string>("Complemento")
                        .IsRequired()
                        .HasColumnType("varchar(100)");

                    b.Property<string>("Estado")
                        .IsRequired()
                        .HasColumnType("varchar(100)");

                    b.Property<string>("Logradouro")
                        .IsRequired()
                        .HasColumnType("varchar(100)");

                    b.Property<string>("Numero")
                        .IsRequired()
                        .HasColumnType("varchar(100)");

                    b.Property<Guid?>("SimulacaoId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("SimulacaoId")
                        .IsUnique()
                        .HasFilter("[SimulacaoId] IS NOT NULL");

                    b.ToTable("EnderecosSimulacao", (string)null);
                });

            modelBuilder.Entity("Solare.Business.Models.Fornecedor", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("Ativo")
                        .HasColumnType("bit");

                    b.Property<string>("Documento")
                        .IsRequired()
                        .HasColumnType("varchar(100)");

                    b.Property<string>("Nome")
                        .IsRequired()
                        .HasColumnType("varchar(100)");

                    b.HasKey("Id");

                    b.ToTable("Fornecedor", (string)null);
                });

            modelBuilder.Entity("Solare.Business.Models.Produto", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("Ativo")
                        .HasColumnType("bit");

                    b.Property<double?>("Corrente")
                        .HasColumnType("float");

                    b.Property<DateTime>("DataCadastro")
                        .HasColumnType("datetime2");

                    b.Property<string>("Descricao")
                        .IsRequired()
                        .HasColumnType("varchar(100)");

                    b.Property<double?>("DimensaoEmMtQuadrado")
                        .HasColumnType("float");

                    b.Property<double?>("Eficiencia")
                        .HasColumnType("float");

                    b.Property<Guid>("FornecedorId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Nome")
                        .IsRequired()
                        .HasColumnType("varchar(100)");

                    b.Property<double?>("Potencia")
                        .HasColumnType("float");

                    b.Property<int?>("Saida")
                        .HasColumnType("int");

                    b.Property<double?>("Tensao")
                        .HasColumnType("float");

                    b.Property<int>("TipoProduto")
                        .HasColumnType("int");

                    b.Property<double>("Valor")
                        .HasColumnType("float");

                    b.HasKey("Id");

                    b.HasIndex("FornecedorId");

                    b.ToTable("Produtos", (string)null);
                });

            modelBuilder.Entity("Solare.Business.Models.Simulacao", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("AnosPermanencia")
                        .HasColumnType("integer");

                    b.Property<decimal>("ConsumoMedioMensal")
                        .HasColumnType("decimal(17,2)");

                    b.Property<decimal>("EspacoTotalInstalacao")
                        .HasColumnType("decimal(17,2)");

                    b.Property<string>("Nome")
                        .IsRequired()
                        .HasColumnType("varchar(100)");

                    b.Property<decimal>("OrcamentoMaximo")
                        .HasColumnType("decimal(17,2)");

                    b.Property<int>("TipoImovel")
                        .HasColumnType("int");

                    b.Property<decimal>("ValorMedioContaEnergia")
                        .HasColumnType("decimal(17,2)");

                    b.HasKey("Id");

                    b.ToTable("Simulacao", (string)null);
                });

            modelBuilder.Entity("Solare.Business.Models.Endereco", b =>
                {
                    b.HasOne("Solare.Business.Models.Fornecedor", "Fornecedor")
                        .WithOne("Endereco")
                        .HasForeignKey("Solare.Business.Models.Endereco", "FornecedorId");

                    b.Navigation("Fornecedor");
                });

            modelBuilder.Entity("Solare.Business.Models.EnderecoSimulacao", b =>
                {
                    b.HasOne("Solare.Business.Models.Simulacao", "Simulacao")
                        .WithOne("EnderecoSimulacao")
                        .HasForeignKey("Solare.Business.Models.EnderecoSimulacao", "SimulacaoId");

                    b.Navigation("Simulacao");
                });

            modelBuilder.Entity("Solare.Business.Models.Produto", b =>
                {
                    b.HasOne("Solare.Business.Models.Fornecedor", "Fornecedor")
                        .WithMany("Produtos")
                        .HasForeignKey("FornecedorId")
                        .IsRequired();

                    b.Navigation("Fornecedor");
                });

            modelBuilder.Entity("Solare.Business.Models.Fornecedor", b =>
                {
                    b.Navigation("Endereco");

                    b.Navigation("Produtos");
                });

            modelBuilder.Entity("Solare.Business.Models.Simulacao", b =>
                {
                    b.Navigation("EnderecoSimulacao");
                });
#pragma warning restore 612, 618
        }
    }
}
